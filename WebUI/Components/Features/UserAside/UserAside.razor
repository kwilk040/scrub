@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject UserAsideService AsideService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@attribute [Authorize]

<AuthorizeView>
    <div id="user-aside-wrapper" @ref="asideWrapper">
        <div id="user-aside-close-area" @onclick="CloseAside"></div>
        <div id="user-aside" class="d-flex flex-column shadow px-3 py-2">
            <i class="bi bi-x hovered fs-1 w-100" @onclick="CloseAside"></i>

            <div class="d-flex gap-1 align-items-center bg-base-emphasis p-1 rounded ">
                <i class="bi bi-person fs-1"></i>
                <h2>@context.User.Identity?.Name</h2>
            </div>


            <div class="d-flex flex-column gap-2 mt-3 h-100">
                @if (@context.User.IsInRole("Admin"))
                {
                    <button class="btn btn-primary border-0"
                            @onclick="NavigateToAdminPanel">
                        <i class="bi bi-gender-male text-text"></i>
                        Admin Panel
                    </button>
                }
                <button class="btn btn-primary border-0"
                        @onclick="NavigateToSettings">
                    <i class="bi bi-gear text-text"/>
                    Settings
                </button>
            </div>

            <form action="logout" method="post" class="w-100">
                <AntiforgeryToken/>
                <input type="hidden" name="ReturnUrl" value="login"/>
                <button type="submit"
                        class="btn btn-primary bg-base-emphasis border-0 w-100">
                    <i class="bi bi-power text-text"/>
                    Log Out
                </button>
            </form>
        </div>
    </div>
</AuthorizeView>


@code {
    private IJSObjectReference? asideModule;
    private ElementReference asideWrapper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            asideModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/aside.js");
            AsideService.OnOpenRequested += OpenAside;
            AsideService.OnCloseRequested += CloseAside;
        }
    }

    private void NavigateToSettings() => NavigationManager.NavigateTo("/user/settings");

    private void NavigateToAdminPanel() => NavigationManager.NavigateTo("/admin/panel");

    private async Task OpenAside()
    {
        if (asideModule != null)
            await asideModule.InvokeVoidAsync("openAside", asideWrapper);
    }

    private async Task CloseAside()
    {
        if (asideModule != null)
            await asideModule.InvokeVoidAsync("closeAside", asideWrapper);
    }

}