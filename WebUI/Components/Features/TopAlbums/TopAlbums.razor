@using Application.Services.Interfaces
@using Core
@using Core.DTO
@using Core.Enums
@using WebUI.Components.Common.CardSlider
@using WebUI.Components.Common.SectionLoader
@rendermode InteractiveServer
@inject IScrobbleService ScrobbleService
@inject IJSRuntime JSRuntime

<section id="top-albums" class="w-100 rounded-5 p-3">
    <header class="d-flex justify-content-between mx-4 my-3">
        <h2>Top Albums</h2>
        <select name="" id="" @onchange="OnRangeChanged">
            @foreach (var rangeOption in RangeOptions)
            {
                <option value="@rangeOption">@rangeOption.GetDisplayName()</option>
            }
        </select>
    </header>
    <section class="d-flex justify-content-center align-items-center" style="min-height: 250px;">
        @if (!isLoaded || topAlbums is null)
        {
            <SectionLoader/>
        }
        else
        {
            <CardSlider>
                @foreach (var artist in topAlbums.Select((value, i) => new { i, value }))
                {
                    <SliderCard Id=@(artist.i + 1) Title="@artist.value.Title"
                                SubTitle="@string.Join(",", artist.value.Artists)"
                                Scrubs="artist.value.Count" Cover="@artist.value.CoverUrl"></SliderCard>
                }
            </CardSlider>
        }
    </section>
</section>

@code {
    private RangeSelection SelectedRange { get; set; } = RangeSelection.Today;

    private IReadOnlyList<RangeSelection> RangeOptions => Enum.GetValues<RangeSelection>().ToList();

    private IReadOnlyList<AlbumDto>? topAlbums;
    private bool isLoaded;
    private IJSObjectReference? scrollModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            scrollModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/scrolling.js");
            topAlbums = await ScrobbleService.GetTopAlbumsAsync(SelectedRange);
            isLoaded = true;
            StateHasChanged();
        }
    }

    private async Task OnRangeChanged(ChangeEventArgs e)
    {
        isLoaded = false;
        StateHasChanged();
        await Task.Delay(1000);
        SelectedRange = Enum.Parse<RangeSelection>(e.Value.ToString());
        topAlbums = await ScrobbleService.GetTopAlbumsAsync(SelectedRange);
        isLoaded = true;
        StateHasChanged();
    }

}